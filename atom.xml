<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>打球只投三分</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cherryyang05.github.io/"/>
  <updated>2020-05-15T15:16:48.313Z</updated>
  <id>http://cherryyang05.github.io/</id>
  
  <author>
    <name>Cherry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DHCP主机动态配置协议详解以及代码实现</title>
    <link href="http://cherryyang05.github.io/2020/05/15/DHCP%E4%B8%BB%E6%9C%BA%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/DHCP%E4%B8%BB%E6%9C%BA%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://cherryyang05.github.io/2020/05/15/DHCP%E4%B8%BB%E6%9C%BA%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/DHCP%E4%B8%BB%E6%9C%BA%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-05-15T10:20:18.000Z</published>
    <updated>2020-05-15T15:16:48.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、DHCP介绍"><a href="#一、DHCP介绍" class="headerlink" title="一、DHCP介绍"></a>一、DHCP介绍</h2><h3 id="1-简要介绍"><a href="#1-简要介绍" class="headerlink" title="1. 简要介绍"></a>1. 简要介绍</h3><p>DHCP协议在我们日常生活中应该是最常见而又经常被忽略的一种协议了。当你走进一间屋子，手机自动连上了WiFi，当你离开了屋子，又自动断开了WiFi……这一系列的幕后都是DHCP协议在默默工作。</p><p>DHCP协议(Dynamic Host Configuration Protocol)是一个基于UDP协议的局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。</p><p>该协议的做大作用是动态的为加入网络的设备分配IP地址，在该协议出现前，IP地址的分配基于静态模式，你把设备的mac地址手动在路由器设置，然后路由器自动生成一个IP与你的mac地址绑定起来。这种应用在有线网络时代可以适用，但在无线时代，每时每刻可能有不同的设备加入或离开网络，因此原有静态匹配IP的做法不再适合。</p><p>DHCP协议的诞生就是为了迎合在无线情况下，网络内部连接设备不断变化的情况。它包含两部分，一是分配IP地址，二是支持客户端请求，服务器应答，使得两者之间有效交换配置信息。</p><p>DHCP最重要功能显然是动态分配IP地址，当我们的设备连接上网络之后里面获得一个可用的IP地址，就得感谢该协议的执行，现在我们大多数设备都依靠DHCP来从路由器动态获得IP<br><a id="more"></a></p><h3 id="2-DHCP的IP租借"><a href="#2-DHCP的IP租借" class="headerlink" title="2. DHCP的IP租借"></a>2. DHCP的IP租借</h3><p>DHCP协议能够维护一个动态的IP池，根据设备加入和离开网络回收或分发可用IP，它甚至能实现多个设备共享相同IP。DHCP协议的实现基于UDP，需要IP的设备和具备分配IP能力的设备根据DHCP协议的方式封装数据包，然后通过UDP协议发送给对方。有了该协议后，我们上网时不再麻烦的去配置各种信息，设备和路由器之间相互通信后，自动配置好相应信息，我们只要等着配置完毕然后上网就行。</p><p>DHCP支持三种地址分配方式，一种是手动分配，由管理员手动将指定IP地址分发给特定设备；第二种是自动分配，它从当前可用的IP地址池中选出一个，永久的分发给某一台特定设备；第三种是动态分配，它从IP地址池中选出一个分发给某台设备一段时间，时间到了后收回，或者设备离开网络后通知路由器主动收回，由此可见，第二种和第三种区别不大</p><p>使用动态分配方式时，管理员指定一系列可以分配的IP，然后DHCP服务器会自动维护哪些IP已经分配，哪些IP可以使用。同时服务器指定分配的IP使用时长，一旦超时后，客户必须主动向服务器请求续租，例如上图就有对应按钮，或者请求重新从服务器获得一个新的IP地址，这个请求应答过程将是我们研究和实现的重点。</p><p>DHCP协议动态分配IP的好处显而易见，首先是自动化，省却了管理员耗时耗力的维护，其次是集中管理，从服务器就可以得知IP的使用情况，由此有效防止IP冲突。而且还能实现地址的共享和重用，如果一台设备不活跃，例如关机或离开网络，协议可以及时收回IP，分发给在网络中的其他设备。</p><p>在DHCP协议管理下，所有设备只能”租借“IP而不能“拥有”IP。有租借就必须有管理，DHCP协议的主要内容就在这里。租借时常根据设备的使用情况而定，作为服务器的设备租借时间必须很长，而对于手持设备而言，租借时间可以很短。在很多情况下，管理员为了防止IP被长时间无效占用，例如某台设备计划租借一个月，但它运行一天就关机了，那么这个IP就会在余下29天浪费掉，因此管理员会强制设备租借短时期，时期到了后再跟服务器请求延长租借期。</p><p>管理员一般把IP池划分为若干类别，不同类别对应不同租期，然后根据接入设备的类型赋予不同类别的IP。一旦租期抵达一半时，设备就开始于服务器协商以便延长租期。</p><p>下面是IP租借的流程图：</p><p><img src="DHCP租借.png" alt="IP租借"></p><p>上图描述了设备向DHCP服务器租借IP8天流程，其中在第4天要与服务器协商续租。租借IP的设备需要保持两个时钟，时钟T1在租借期过了一半时触发，此时设备向服务器请求续租；如果续租不成功，第二个时钟在租期87.5%时触发，设备向另一个DHCP服务器发起租借IP的请求。我们后面用代码实现协议时，主要通过构造数据包完成上面所述流程。</p><p>DHCP协议时典型的服务器客户端应用模式。需要IP的设备是客户端，分发IP的设备是服务器，两者通过互发消息完成一项任务。他们之间的交互可以由下图表达：</p><p><img src="DHCP握手.jpg" alt="DHCP握手"></p><p>类似于<code>TCP</code>的握手，但是又比TCP简单不少。</p><h2 id="二、DHCP主机动态配置协议解析和数据包格式说明"><a href="#二、DHCP主机动态配置协议解析和数据包格式说明" class="headerlink" title="二、DHCP主机动态配置协议解析和数据包格式说明"></a>二、DHCP主机动态配置协议解析和数据包格式说明</h2><h3 id="1-查看DHCP数据包"><a href="#1-查看DHCP数据包" class="headerlink" title="1. 查看DHCP数据包"></a>1. 查看DHCP数据包</h3><p>打开网络封包分析软件WireShack，输入过滤条件<code>bootp.option.type == 53</code>(或者<code>dhcp.option.type == 53</code>也可)，在命令行中输入<code>ipconfig/renew</code>，表示续租DHCP服务器，我们获取这样的数据包：</p><p><img src="DHCP数据包介绍.png" alt="DHCP数据包介绍"></p><p>点开一个数据包，看到：</p><p><img src="具体格式.png" alt="具体格式"></p><p>我们看到DHCP协议数据包的组成格式为<code>IP数据包-&gt;UDP数据包-&gt;Boostrap Protocoal数据包(也就是DHCP数据包)</code><br><strong>【注】Boostrap 是DHCP协议的前身，它叫主机静态配置协议。DHCP其实是它的扩展，将原来静态配置的过程动态化，于是配置起来更加灵活方便，只不过DHCP数据包的依然以Boostrap协议数据包为基础。</strong></p><p>我们点开DHCP看看具体内容：</p><p><img src="DHCP具体内容.png" alt="DHCP具体内容"></p><p>通过观察，我们大概可以知道DHCP数据包大概有哪些字段，要了解这些字段的作用，我们还得充分了解协议的具体交互流程。DHCP协议以客户端&lt;-&gt;服务器的方式进行交互，整个过程由客户端主导，服务器被动回应，因此掌握客户端的运行状态，我们就可以掌握DHCP的协议交互流程。</p><h3 id="2-DHCP流程"><a href="#2-DHCP流程" class="headerlink" title="2. DHCP流程"></a>2. DHCP流程</h3><p>DHCP在执行时维护了一个状态机，该状态机由八个状态组成：<br>客户端在运行时维护一个内部状态机，其运行过程如下：</p><ul><li><ol><li><code>INIT</code>状态。客户端创建一个DHCPDISCOVER消息在局域网内广播，查询可用的DHCP服务器，然后进入<code>SELECTING</code>状态。</li></ol></li><li><ol><li><code>SELECTING</code> 状态。局域网内的DHCP收到广播消息后，发送<code>DHCPOFFER</code>消息，客户端会收到一个或多个DHCP服务器的回应，然后它从众多回应中选取一个服务器，向它发送<code>DHCPREQUEST</code>消息，然后进入<code>REQUESTING</code>状态。</li></ol></li><li><ol><li><code>REQUESTING</code>状态。客户端向服务器发送<code>DHCPREQUEST</code>消息中包含了它对服务器的数据请求，例如可用IP地址以及各类配置参数，请求发送出去后它等待服务器回应。服务器会返回<code>DHCPACK</code>消息，里面包含了客户端想要的可用IP以及配置参数等信息。</li></ol></li></ul><p>收到消息后，客户端检测服务器返回的IP地址是否可用，可用的话进入使用状态并像上一节描述的那样设置两个超时时钟。如果客户端发现IP地址不可用，它向服务器发送<code>DHCPDECLINE</code>消息，然后转入状态1。</p><p>如果客户端从服务器收到的是DHCPNAK消息，它表示服务器拒绝向客户端提供服务，因此客户端重新进入状态1.</p><ul><li><ol><li><code>INIT-REBOOT</code>状态。如果客户端已经租借到IP，它重启后进入该状态。此时它会向服务器发送DHCPREQUEST消息，重新确定它对IP的使用权，然后客户端进入REBOOTING状态，等待服务器反应。</li></ol></li><li><ol><li><code>REBOOTING</code>状态。此时客户正在等待服务器返回确认消息，此时会有3中情况。一是客户端收到服务器发来的DHCPACK消息，表明可以继续使用它当前IP,于是客户端进入BOUND状态；二是，客户端得到DHCPACK回应，然后发现它原来使用的IP在自己关机或重启时，被其他设备抢夺了，于是他想服务器发送DHCPDECLINE消息，然后进入状态1；三是收到服务器发来的DHCPNAK消息，这表明服务器告诉客户端IP不能再继续使用，于是客户端进入状态1.</li></ol></li><li><ol><li><code>BOUND</code>状态。此时客户端得到可用IP地址，并进入使用状态。此时它启动两个时钟，T1和T2。当T1超时时，它进入状态RENEWING。如果客户端主动要放弃使用当前IP，它会向服务器发送DHCPRELEASE消息，然后进入状态1.</li></ol></li><li><ol><li><code>RENEWING</code>状态。此时客户端希望续租当前IP，于是他想客户端发送DHCPREQUEST消息，然后等待服务器确认。此时客户端要面临三种情况，一是服务器返回DHCPACK消息，它可以继续使用当前IP；二是收到DHCPNAK消息，服务器拒绝客户端继续租用当前IP；三是客户端的T2时钟超时，客户端进入REBINGDING状态。</li></ol></li><li><ol><li><code>REBIDING</code>状态。此时客户端无法继续续租原有IP，于是它持续向局域网广播DHCPREQUEST消息，直到有服务器响应它为止。此时客户端又面临三种情况。一是有服务器向客户端返回DHCPACK消息，于是客户端可以使用新分配的IP；二是服务器返回DHCPNAK消息，这表明服务器希望客户端重新启动租借流程，于是客户端进入INIT状态；第三是，在收到回应前，客户端当前租用的IP到期，它重新进入INIT状态。</li></ol></li></ul><p>为了简单起见，我们将以客户端的方式编写代码，上面的流程状态可以使用下图统一描述：</p><p><img src="状态机.png" alt="状态机"></p><h3 id="3-字段详解"><a href="#3-字段详解" class="headerlink" title="3. 字段详解"></a>3. 字段详解</h3><p>首先完成第一步，客户端向局域网广播消息，然后收到服务器应答。下面是DHCP消息的具体格式：</p><p><img src="DHCP具体格式.png" alt="DHCP具体格式"></p><p>上面的是前面抓包时对应的DHCP部分，依次解析各个字段：</p><ul><li><code>op</code>字段1字节，它表明消息类型，请求消息使用数值1，回应消息使用数值2</li><li><code>HType</code>1字节，它表明消息发送所使用的网络类型，由于我们默认使用互联网，因此它的值固定为1</li><li><code>HLen</code>字段1字节，它表明设备硬件地址的长度，由于我们默认使用mac地址，因此该字段固定为6</li><li><code>Hops</code>字段1字节，它表明数据包可以跨越几个不同网络，该字段的作用我们在前面traceroute程序中了解过，由于我们希望限制消息在当前局域网内流通，因此设置为0</li><li><code>XID</code>字段4字节。它与ICMP消息中的session作用一样，用来标志一次对话过程</li><li><code>Secs</code>字段2字节。它用来表明客户端发出请求后等待的时间，一般该字段不常使用，我们将它固定为0</li><li><code>Flags</code>字段2字节，取值0或1，如果设置为1，客户端要求服务器以广播的方式发送回应消息，因为此时客户端可能还没有IP地址</li><li><code>CIAddr</code>字段4字节，它存放客户端当前IP地址，如果客户端当前有IP，而且进入状态BOUND,RENEWING状态，其他情况下统一设置为0</li><li><code>YIAddr</code>字段4字节，这是服务器返回给客户端使用的IP</li><li><code>SIAddr</code>字段4字节，服务器IP地址，它有点特殊，这个IP是不一定是当前交互的服务器IP，而是设备下次启动时去获取IP地址的服务器IP</li><li><code>GIAddr</code>字段4字节，网关IP，当DHCP服务器不在本地局域网时，设备将通过该IP将数据包转发给处于另一个局域网的服务器，通常情况下使用不到</li><li><code>CHAddr</code>字段16字节，设备的硬件地址。由于我们默认设备使用mac地址，因此只使用到6个字节，其余10个字节用0填充</li><li><code>SName</code>字段64个字节，该字段用做DHCP服务器的字符串名称</li><li><code>File</code>字段128字节，该字段用于在设备和服务器间交换特定信息</li><li><code>Options</code>字段，可变长。该字段用于设备和服务器间交换多种配置信息</li></ul><p>接下来我们看看<code>Options</code>字段，由于所有信息的交互都存储在该字段，因此我们需搞清楚它的结构。在该字段开始前是4个字节的<code>魔术字</code>，固定为<code>99.130.83.99</code>(十六进制：63 82 53 63),然后才是一系列Option数据结构，Option数据结构组成如下：</p><p><img src="option组成.png" alt="option组成"></p><p>每个<code>Option</code>由三字段组成，第一字段是<code>Code</code>,用来表明当前<code>Option</code>类型，它有两个特殊值，一个是<code>0</code>，它表示当前<code>Option</code>只有这一个字节，另一个特殊值是<code>255</code>，它表示后续不再含有<code>Option</code>结构体；第二字段是<code>len</code>，用来标志数据段的长度；第三字段是<code>Data</code>，用来存储数据。</p><p>由于Option结构体用于客户端与服务器进行数据交换，因此它的种类相当繁杂。</p><p>代码实现将在下一篇文章中实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、DHCP介绍&quot;&gt;&lt;a href=&quot;#一、DHCP介绍&quot; class=&quot;headerlink&quot; title=&quot;一、DHCP介绍&quot;&gt;&lt;/a&gt;一、DHCP介绍&lt;/h2&gt;&lt;h3 id=&quot;1-简要介绍&quot;&gt;&lt;a href=&quot;#1-简要介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 简要介绍&quot;&gt;&lt;/a&gt;1. 简要介绍&lt;/h3&gt;&lt;p&gt;DHCP协议在我们日常生活中应该是最常见而又经常被忽略的一种协议了。当你走进一间屋子，手机自动连上了WiFi，当你离开了屋子，又自动断开了WiFi……这一系列的幕后都是DHCP协议在默默工作。&lt;/p&gt;
&lt;p&gt;DHCP协议(Dynamic Host Configuration Protocol)是一个基于UDP协议的局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。&lt;/p&gt;
&lt;p&gt;该协议的做大作用是动态的为加入网络的设备分配IP地址，在该协议出现前，IP地址的分配基于静态模式，你把设备的mac地址手动在路由器设置，然后路由器自动生成一个IP与你的mac地址绑定起来。这种应用在有线网络时代可以适用，但在无线时代，每时每刻可能有不同的设备加入或离开网络，因此原有静态匹配IP的做法不再适合。&lt;/p&gt;
&lt;p&gt;DHCP协议的诞生就是为了迎合在无线情况下，网络内部连接设备不断变化的情况。它包含两部分，一是分配IP地址，二是支持客户端请求，服务器应答，使得两者之间有效交换配置信息。&lt;/p&gt;
&lt;p&gt;DHCP最重要功能显然是动态分配IP地址，当我们的设备连接上网络之后里面获得一个可用的IP地址，就得感谢该协议的执行，现在我们大多数设备都依靠DHCP来从路由器动态获得IP&lt;br&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://CherryYang05.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP/IP协议" scheme="http://CherryYang05.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-IP%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="计算机网络" scheme="http://CherryYang05.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP/IP协议" scheme="http://CherryYang05.github.io/tags/TCP-IP%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="DHCP" scheme="http://CherryYang05.github.io/tags/DHCP/"/>
    
  </entry>
  
  <entry>
    <title>开源镜像网站</title>
    <link href="http://cherryyang05.github.io/2020/05/13/%E5%BC%80%E6%BA%90%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99/"/>
    <id>http://cherryyang05.github.io/2020/05/13/%E5%BC%80%E6%BA%90%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99/</id>
    <published>2020-05-13T06:32:31.000Z</published>
    <updated>2020-05-13T06:42:56.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些开源镜像网站汇总"><a href="#一些开源镜像网站汇总" class="headerlink" title="一些开源镜像网站汇总"></a>一些开源镜像网站汇总</h2><h4 id="开源网站镜像"><a href="#开源网站镜像" class="headerlink" title="开源网站镜像"></a>开源网站镜像</h4><ul><li>搜狐开源镜像站：<a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a></li><li>网易开源镜像站：<a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a></li><li>开源中国：<a href="http://mirrors.oschina.net/" target="_blank" rel="noopener">http://mirrors.oschina.net/</a></li><li>首都在线科技股份有限公司：<a href="http://mirrors.yun-idc.com/" target="_blank" rel="noopener">http://mirrors.yun-idc.com/</a></li><li>阿里云开源镜像：<a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></li><li>LUPA：<a href="http://mirror.lupaworld.com/" target="_blank" rel="noopener">http://mirror.lupaworld.com/</a></li><li>常州贝特康姆软件技术有限公司(原cn99）：<a href="http://centos.bitcomm.cn/" target="_blank" rel="noopener">http://centos.bitcomm.cn/</a></li></ul><a id="more"></a><h4 id="大学校园镜像"><a href="#大学校园镜像" class="headerlink" title="大学校园镜像"></a>大学校园镜像</h4><ul><li>中山大学镜像：<a href="http://mirror.sysu.edu.cn/" target="_blank" rel="noopener">http://mirror.sysu.edu.cn/</a></li><li>山东理工大学：<a href="http://mirrors.sdutlinux.org/" target="_blank" rel="noopener">http://mirrors.sdutlinux.org/</a></li><li>哈尔滨工业大学：<a href="http://run.hit.edu.cn/" target="_blank" rel="noopener">http://run.hit.edu.cn/</a></li><li>中国地质大学：<a href="http://cugbteam.org/" target="_blank" rel="noopener">http://cugbteam.org/</a></li><li>大连理工大学：<a href="http://mirror.dlut.edu.cn/" target="_blank" rel="noopener">http://mirror.dlut.edu.cn/</a></li><li>西南林业大学 <a href="http://cs3.swfu.edu.cn/cs3guide.html" target="_blank" rel="noopener">http://cs3.swfu.edu.cn/cs3guide.html</a></li><li>北京化工大学（仅教育网可以访问），包含 CentOS 镜像：<a href="http://ubuntu.buct.edu.cn/" target="_blank" rel="noopener">http://ubuntu.buct.edu.cn/</a></li><li>天津大学：<a href="http://mirror.tju.edu.cn/" target="_blank" rel="noopener">http://mirror.tju.edu.cn/</a></li><li>西南大学：<a href="http://linux.swu.edu.cn/swudownload/Distributions/" target="_blank" rel="noopener">http://linux.swu.edu.cn/swudownload/Distributions/</a></li><li>青岛大学：<a href="http://mirror.qdu.edu.cn/" target="_blank" rel="noopener">http://mirror.qdu.edu.cn/</a></li><li>南京师范大学：<a href="http://mirrors.njnu.edu.cn/" target="_blank" rel="noopener">http://mirrors.njnu.edu.cn/</a></li><li>大连东软信息学院： <a href="http://mirrors.neusoft.edu.cn/" target="_blank" rel="noopener">http://mirrors.neusoft.edu.cn/</a></li><li>浙江大学：<a href="http://mirrors.zju.edu.cn/" target="_blank" rel="noopener">http://mirrors.zju.edu.cn/</a></li><li>兰州大学：<a href="http://mirror.lzu.edu.cn/" target="_blank" rel="noopener">http://mirror.lzu.edu.cn/</a></li><li>厦门大学：<a href="http://mirrors.xmu.edu.cn/" target="_blank" rel="noopener">http://mirrors.xmu.edu.cn/</a></li><li>北京理工大学：<br><a href="http://mirror.bit.edu.cn" target="_blank" rel="noopener">http://mirror.bit.edu.cn</a> (IPv4 only)<br><a href="http://mirror.bit6.edu.cn" target="_blank" rel="noopener">http://mirror.bit6.edu.cn</a> (IPv6 only)</li><li>北京交通大学：<br><a href="http://mirror.bjtu.edu.cn" target="_blank" rel="noopener">http://mirror.bjtu.edu.cn</a> (IPv4 only)<br><a href="http://mirror6.bjtu.edu.cn" target="_blank" rel="noopener">http://mirror6.bjtu.edu.cn</a> (IPv6 only)<br><a href="http://debian.bjtu.edu.cn" target="_blank" rel="noopener">http://debian.bjtu.edu.cn</a> (IPv4+IPv6)</li><li>上海交通大学：<br><a href="http://ftp.sjtu.edu.cn/" target="_blank" rel="noopener">http://ftp.sjtu.edu.cn/</a> (IPv4 only)<br><a href="http://ftp6.sjtu.edu.cn" target="_blank" rel="noopener">http://ftp6.sjtu.edu.cn</a> (IPv6 only)</li><li>清华大学：<br><a href="http://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/</a> (IPv4+IPv6)<br><a href="http://mirrors.6.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">http://mirrors.6.tuna.tsinghua.edu.cn/</a> (IPv6 only)<br><a href="http://mirrors.4.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">http://mirrors.4.tuna.tsinghua.edu.cn/</a> (IPv4 only)</li><li>中国科学技术大学：<br><a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/</a> (IPv4+IPv6)<br><a href="http://mirrors4.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors4.ustc.edu.cn/</a><br><a href="http://mirrors6.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors6.ustc.edu.cn/</a></li><li>东北大学：<br><a href="http://mirror.neu.edu.cn/" target="_blank" rel="noopener">http://mirror.neu.edu.cn/</a> (IPv4 only)<br><a href="http://mirror.neu6.edu.cn/" target="_blank" rel="noopener">http://mirror.neu6.edu.cn/</a> (IPv6 only)</li><li>华中科技大学：<br><a href="http://mirrors.hust.edu.cn/" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/</a><br><a href="http://mirrors.hustunique.com/" target="_blank" rel="noopener">http://mirrors.hustunique.com/</a></li><li>电子科技大学：<a href="http://ubuntu.uestc.edu.cn/" target="_blank" rel="noopener">http://ubuntu.uestc.edu.cn/</a></li><li>电子科大凝聚工作室(Raspbian单一系统镜像) <a href="http://raspbian.cnssuestc.org/" target="_blank" rel="noopener">http://raspbian.cnssuestc.org/</a></li><li>电子科大星辰工作室(少数小众发布版镜像) <a href="http://mirrors.stuhome.net/" target="_blank" rel="noopener">http://mirrors.stuhome.net/</a></li></ul><h4 id="PyPi-镜像"><a href="#PyPi-镜像" class="headerlink" title="PyPi 镜像"></a>PyPi 镜像</h4><ul><li>豆瓣：<a href="http://pypi.douban.com/" target="_blank" rel="noopener">http://pypi.douban.com/</a></li><li>山东理工大学：<a href="http://pypi.sdutlinux.org/" target="_blank" rel="noopener">http://pypi.sdutlinux.org/</a></li><li>中山大学：<a href="http://mirror.sysu.edu.cn/pypi/" target="_blank" rel="noopener">http://mirror.sysu.edu.cn/pypi/</a></li><li>V2EX：<a href="http://pypi.v2ex.com/simple/" target="_blank" rel="noopener">http://pypi.v2ex.com/simple/</a></li><li><p>RubyGems 镜像</p></li><li><p>中山大学：<a href="http://mirror.sysu.edu.cn/rubygems/" target="_blank" rel="noopener">http://mirror.sysu.edu.cn/rubygems/</a></p></li><li>山东理工大学：<a href="http://ruby.sdutlinux.org/" target="_blank" rel="noopener">http://ruby.sdutlinux.org/</a></li><li>淘宝网：<a href="http://ruby.taobao.org/" target="_blank" rel="noopener">http://ruby.taobao.org/</a></li></ul><h4 id="npm-镜像"><a href="#npm-镜像" class="headerlink" title="npm 镜像"></a>npm 镜像</h4><ul><li>cnpmjs：<a href="http://cnpmjs.org/" target="_blank" rel="noopener">http://cnpmjs.org/</a></li></ul><p>附Debian各个版本的下载地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 以下为debian-9.6版的下载地址，不同镜像对应不同的Linux桌面环境</span><br><span class="line"> </span><br><span class="line"># 官网下载地址 共三个镜像文件，一般只下载第一个就行了，当然也可以全部现在，启动时先选择第一个光盘，如果你安装的时候选择的软件比较多，可能会提示你插入第二张或者第三张光盘</span><br><span class="line">链接：https:&#x2F;&#x2F;cdimage.debian.org&#x2F;debian-cd&#x2F;current&#x2F;i386&#x2F;iso-dvd&#x2F;debian-9.6.0-i386-DVD-1.iso</span><br><span class="line">链接：https:&#x2F;&#x2F;cdimage.debian.org&#x2F;debian-cd&#x2F;current&#x2F;i386&#x2F;iso-dvd&#x2F;debian-9.6.0-i386-DVD-2.iso</span><br><span class="line">链接：https:&#x2F;&#x2F;cdimage.debian.org&#x2F;debian-cd&#x2F;current&#x2F;i386&#x2F;iso-dvd&#x2F;debian-9.6.0-i386-DVD-3.iso</span><br><span class="line"> </span><br><span class="line"># 这下面时163网站给出的镜像，而且是分成不同的桌面版本来下载的，如果不想折腾，可以直接选择下面一个镜像进行下载。</span><br><span class="line"># 事先可以搜索一下Debian的各种桌面  cinnamon&#x2F;gnome(主流)&#x2F;kde(主流)&#x2F;lxde&#x2F;mate&#x2F;xfce</span><br><span class="line"> </span><br><span class="line"># debian-live-9.6.0-i386-cinnamon.iso    下载地址</span><br><span class="line">链接：http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-cd&#x2F;9.6.0-live&#x2F;i386&#x2F;iso-hybrid&#x2F;debian-live-9.6.0-i386-cinnamon.iso</span><br><span class="line"> </span><br><span class="line"># debian-live-9.6.0-i386-gnome.iso     下载地址</span><br><span class="line">链接：http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-cd&#x2F;9.6.0-live&#x2F;i386&#x2F;iso-hybrid&#x2F;debian-live-9.6.0-i386-gnome.iso</span><br><span class="line"> </span><br><span class="line"># debian-live-9.6.0-i386-kde.iso  下载地址</span><br><span class="line">链接：http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-cd&#x2F;9.6.0-live&#x2F;i386&#x2F;iso-hybrid&#x2F;debian-live-9.6.0-i386-kde.iso</span><br><span class="line"> </span><br><span class="line"># debian-live-9.6.0-i386-lxde.iso    下载地址</span><br><span class="line">链接：http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-cd&#x2F;9.6.0-live&#x2F;i386&#x2F;iso-hybrid&#x2F;debian-live-9.6.0-i386-lxde.iso</span><br><span class="line"> </span><br><span class="line"># debian-live-9.6.0-i386-mate.iso     下载地址</span><br><span class="line">链接: http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-cd&#x2F;9.6.0-live&#x2F;i386&#x2F;iso-hybrid&#x2F;debian-live-9.6.0-i386-mate.iso</span><br><span class="line"> </span><br><span class="line"># debian-live-9.6.0-i386-xfce.iso     下载地址</span><br><span class="line">链接：http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-cd&#x2F;9.6.0-live&#x2F;i386&#x2F;iso-hybrid&#x2F;debian-live-9.6.0-i386-xfce.iso</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一些开源镜像网站汇总&quot;&gt;&lt;a href=&quot;#一些开源镜像网站汇总&quot; class=&quot;headerlink&quot; title=&quot;一些开源镜像网站汇总&quot;&gt;&lt;/a&gt;一些开源镜像网站汇总&lt;/h2&gt;&lt;h4 id=&quot;开源网站镜像&quot;&gt;&lt;a href=&quot;#开源网站镜像&quot; class=&quot;headerlink&quot; title=&quot;开源网站镜像&quot;&gt;&lt;/a&gt;开源网站镜像&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;搜狐开源镜像站：&lt;a href=&quot;http://mirrors.sohu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.sohu.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;网易开源镜像站：&lt;a href=&quot;http://mirrors.163.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.163.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开源中国：&lt;a href=&quot;http://mirrors.oschina.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.oschina.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;首都在线科技股份有限公司：&lt;a href=&quot;http://mirrors.yun-idc.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.yun-idc.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阿里云开源镜像：&lt;a href=&quot;http://mirrors.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.aliyun.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LUPA：&lt;a href=&quot;http://mirror.lupaworld.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirror.lupaworld.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;常州贝特康姆软件技术有限公司(原cn99）：&lt;a href=&quot;http://centos.bitcomm.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://centos.bitcomm.cn/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://CherryYang05.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="开源镜像" scheme="http://CherryYang05.github.io/tags/%E5%BC%80%E6%BA%90%E9%95%9C%E5%83%8F/"/>
    
      <category term="系统" scheme="http://CherryYang05.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="http://CherryYang05.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>BAT批处理文件的使用（二）</title>
    <link href="http://cherryyang05.github.io/2020/05/09/BAT%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://cherryyang05.github.io/2020/05/09/BAT%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-05-09T10:44:22.000Z</published>
    <updated>2020-05-09T10:46:31.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BAT批处理（二）：批量删除指定文件以及相关简单的语法结构-if-for-，系统变量errorlevel，变量延迟等"><a href="#BAT批处理（二）：批量删除指定文件以及相关简单的语法结构-if-for-，系统变量errorlevel，变量延迟等" class="headerlink" title="BAT批处理（二）：批量删除指定文件以及相关简单的语法结构(if,for)，系统变量errorlevel，变量延迟等"></a>BAT批处理（二）：批量删除指定文件以及相关简单的语法结构(if,for)，系统变量errorlevel，变量延迟等</h2><p>前两天在使用 VSCode 的时候，看到之前那么多 cpp 编译产生的 exe 可执行文件，于是心生一个念头，我要把它们全部删掉，但是又不想一个个地删，便想到了利用 <code>bat</code> 脚本批量删除 exe 文件。于是在搜集了大量资料后，开始了编写。<br><a id="more"></a><br>首先就是一条简单的 <code>del</code>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del F:\Code\C++\*.exe</span><br></pre></td></tr></table></figure><br>但是发现只能删除掉 <code>C++</code> 那个文件夹根目录下的 exe 文件，然后发现，在后面加上 <code>/s</code>，表示在当前目录递归删除指定文件，就是还要进入子目录寻找文件。</p><blockquote><p>/a 根据百属性选择要删除的文件<br>/f 强制删除只读度文件<br>/s 从所有子目录删除指定文件<br>/q 安静模式。删除全局通配符时，不要求确知</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del F:\Code\C++\*.exe /s</span><br></pre></td></tr></table></figure><p>运行之后，哗啦啦，全删掉了(在其他盘里测试一下)：<br><img src="https://img-blog.csdnimg.cn/20200509172606608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>本来其实这样就可以了，把这个批处理脚本放到 C++ 文件夹根目录就行了，但是如果多次执行的时候，本来已经没有 exe 文件了，还要执行，就会提示 <code>找不到 G:\test\*.exe</code>，对于强迫症的我当然不能忍受起码提示一个 <code>exe文件已经删完啦</code> 之类的。要这样写势必要进行条件判断，然后，又去找了很多资料。<br>一开始搜到一个 <code>errorlevel</code> 的系统变量，会判断你当前这条语句是否执行，如果成功执行该变量的值为 <code>0</code>， 否则是 <code>1-255</code> 之间的某一个值，这里的值主要是根据语句未能成功执行的原因（其实就是跟中断类型差不多）来决定的，一般是 <code>1</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off </span><br><span class="line">if ERRORLEVEL 1 goto fail</span><br><span class="line">if ERRORLEVEL 0 goto success</span><br><span class="line">goto done</span><br><span class="line">:fail</span><br><span class="line">echo exe文件已经没有啦，别删啦~</span><br><span class="line">goto done</span><br><span class="line">:success</span><br><span class="line">echo 正在删除所有烦人的exe文件...</span><br><span class="line">del F:\Code\C++\*.exe /s</span><br><span class="line">:done</span><br><span class="line">echo 执行完成</span><br></pre></td></tr></table></figure><br>运行后发现了中文乱码，于是改一下编码为 <code>ANSI</code><img src="https://img-blog.csdnimg.cn/20200509174008621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再次执行，发现不管 <code>exe</code> 文件是否被删掉，都会执行 <code>success</code> 标号的语句，说明 <code>del</code> 语句都被执行了，只是找不到文件而已。<br><img src="https://img-blog.csdnimg.cn/20200509174405846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这种方法不行那就试试其他方法，用 <code>if exist</code> 条件判断应该可以吧<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@echo off </span><br><span class="line">::if ERRORLEVEL 1 goto fail</span><br><span class="line">::if ERRORLEVEL 0 goto success</span><br><span class="line">if exist F:\Code\C++\*.exe (goto success) else (goto fail)</span><br><span class="line">goto done</span><br><span class="line">:fail</span><br><span class="line">echo exe文件已经没有啦，别删啦~</span><br><span class="line">goto done</span><br><span class="line">:success</span><br><span class="line">echo 正在删除所有烦人的exe文件...</span><br><span class="line">del F:\Code\C++\*.exe /s</span><br><span class="line">:done</span><br><span class="line">echo 执行完成</span><br></pre></td></tr></table></figure><br>这里的 <code>::</code>是注释，当然注释还有其他写法</p><blockquote><p>1、:: 注释内容（第一个冒号后也可以跟任何一个非字母数字的字符）<br>    2、rem 注释内容（不能出现重定向符号和管道符号）<br>    3、echo 注释内容（不能出现重定向符号和管道符号）〉nul<br>    4、if not exist nul 注释内容（不能出现重定向符号和管道符号）<br>    5、:注释内容（注释文本不能与已有标签重名）<br>    6、%注释内容%（可以用作行间注释，不能出现重定向符号和管道符号）<br>    7、goto 标签 注释内容（可以用作说明goto的条件和执行内容）<br>    8、:标签 注释内容（可以用作标签下方段的执行内容</p></blockquote><p>完美执行。<br>然后在之后的其他测试中，若 <code>C++</code> 根目录下没有 <code>exe</code> 文件，而在其子文件夹下有 <code>exe</code> 文件的话，就出问题了，因为 <code>if exist</code> 那行语句只是判断当前文件夹根目录下是否存在 <code>exe</code> 文件。那该怎么办呢？<br>应该要对 <code>C++</code> 根目录进行递归查找，便是 <code>for</code> 语句：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cls</span><br><span class="line">set PATH=F:\Code\C++\</span><br><span class="line">set FILE=*.exe</span><br><span class="line">set cnt=0</span><br><span class="line">for /R %PATH% %%s in (%FILE%) do (</span><br><span class="line">::echo %%s</span><br><span class="line">set /a cnt=%cnt%+1</span><br><span class="line">)</span><br><span class="line">echo 删除了%cnt%个文件！</span><br><span class="line">if %cnt% EQU 0 (goto fail) else (goto success)</span><br><span class="line">goto done</span><br><span class="line">:fail</span><br><span class="line">echo exe文件已经没有啦，别删啦~</span><br><span class="line">goto done</span><br><span class="line">:success</span><br><span class="line">echo 正在删除所有烦人的exe文件...</span><br><span class="line">del *.exe /s</span><br><span class="line">echo 删除了%cnt%个文件！</span><br><span class="line">goto done</span><br><span class="line">:done</span><br><span class="line">echo 执行完成</span><br></pre></td></tr></table></figure><br><code>for</code> 循环后面的 <code>/R</code> 便是对当前文件夹进行递归查找，若存在后缀名为 <code>.exe</code> 文件，便把计数值+1.然后运行，又出错了。。。<br>cnt的值始终为1，这又是为什么呢？<br>又查了许多资料，发现 批处理语法中还有叫什么 <code>变量延迟</code> 的语法，具体就是 <strong>当我们准备执行一条命令的时候，命令解释器会先将命令读取，如果命令中有环境变量，那么就会将变量的值先读取来出，然后在运行这条命令</strong>，如：<code>echo %cnt%</code>，当我们执行这条命令的时候，命令解释器会先读出 <code>%cnt%</code> 的值，然后执行echo，得到的结果是屏幕上显示出 <code>cnt的值</code>。但是，有的时候，我们在执行一条命令的时候，命令解释器将环境变量的值读出来以后，我们的环境变量的值发生了改变，这时个再执行命令就是使用的变量改变前的值，这就不是我们想要的结果了。<br>也就是，当 <code>for</code> 语句执行时，命令解释器首先把它变成<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for /R %s in (*.exe) do (set /a cnt=0+1 )</span><br></pre></td></tr></table></figure><br>因此在这个循环里面 <code>cnt</code> 就全是0了，这里我们就需要用到 <code>变量延迟</code> 了，设置 <code>setlocal enabledelayedexpansion</code>，然后将需要使用变量延迟的变量两边用 <code>!</code> 表示，即 <code>set /a cnt=!cnt!+1</code>.<br>关闭变量延迟的话就是 <code>setlocal disabledelayedexpansion</code>.<br>全部修改完了 <code>bat</code> 程序如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cls</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">set PATH=F:\Code\C++\</span><br><span class="line">set FILE=*.exe</span><br><span class="line">set cnt=0</span><br><span class="line">for /R %PATH% %%s in (%FILE%) do (</span><br><span class="line">::echo %%s</span><br><span class="line">set /a cnt=!cnt!+1</span><br><span class="line">)</span><br><span class="line">if %cnt% EQU 0 (goto fail) else (goto success)</span><br><span class="line">goto done</span><br><span class="line">:fail</span><br><span class="line">echo exe文件已经没有啦，别删啦~</span><br><span class="line">goto done</span><br><span class="line">:success</span><br><span class="line">echo 正在删除所有烦人的exe文件...</span><br><span class="line">del %PATH%%FILE% /s</span><br><span class="line">echo 删除了%cnt%个文件！</span><br><span class="line">goto done</span><br><span class="line">:done</span><br><span class="line">echo 执行完成</span><br><span class="line">endlocal</span><br></pre></td></tr></table></figure><p>大功告成！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BAT批处理（二）：批量删除指定文件以及相关简单的语法结构-if-for-，系统变量errorlevel，变量延迟等&quot;&gt;&lt;a href=&quot;#BAT批处理（二）：批量删除指定文件以及相关简单的语法结构-if-for-，系统变量errorlevel，变量延迟等&quot; class=&quot;headerlink&quot; title=&quot;BAT批处理（二）：批量删除指定文件以及相关简单的语法结构(if,for)，系统变量errorlevel，变量延迟等&quot;&gt;&lt;/a&gt;BAT批处理（二）：批量删除指定文件以及相关简单的语法结构(if,for)，系统变量errorlevel，变量延迟等&lt;/h2&gt;&lt;p&gt;前两天在使用 VSCode 的时候，看到之前那么多 cpp 编译产生的 exe 可执行文件，于是心生一个念头，我要把它们全部删掉，但是又不想一个个地删，便想到了利用 &lt;code&gt;bat&lt;/code&gt; 脚本批量删除 exe 文件。于是在搜集了大量资料后，开始了编写。&lt;br&gt;
    
    </summary>
    
    
      <category term="BAT批处理" scheme="http://CherryYang05.github.io/categories/BAT%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
    
      <category term="BAT" scheme="http://CherryYang05.github.io/tags/BAT/"/>
    
      <category term="批处理" scheme="http://CherryYang05.github.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
      <category term="脚本" scheme="http://CherryYang05.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>密码学（二）：古典密码之维吉尼亚密码的破解</title>
    <link href="http://cherryyang05.github.io/2020/05/06/%E5%AF%86%E7%A0%81%E5%AD%A6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E4%B9%8B%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81%E7%9A%84%E7%A0%B4%E8%A7%A3/"/>
    <id>http://cherryyang05.github.io/2020/05/06/%E5%AF%86%E7%A0%81%E5%AD%A6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E4%B9%8B%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81%E7%9A%84%E7%A0%B4%E8%A7%A3/</id>
    <published>2020-05-06T09:08:39.000Z</published>
    <updated>2020-05-06T10:24:13.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="维吉尼亚密码的破解"><a href="#维吉尼亚密码的破解" class="headerlink" title="维吉尼亚密码的破解"></a>维吉尼亚密码的破解</h2><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><p>&emsp;&emsp;上一章我们介绍了维吉尼亚密码的原理，是通过移位替换的加密方法进行加密，但是因为概率论的出现这种简单的移位或替换就容易破解了，其原理很简单，英文中字母出现的频率是不一样的。比如字母 <strong>e</strong> 是出现频率最高的，占<strong>12.7%</strong>；其次是<strong>t</strong>，<strong>9.1%</strong>；然后是<strong>a</strong>，<strong>o</strong>，<strong>i</strong>，<strong>n</strong>等，最少的是<strong>z</strong>，只占<strong>0.1%</strong>。<br><a id="more"></a><br><img src="https://img-blog.csdnimg.cn/20200216150747368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="字母出现概率"></p><p><a id="具体概率表">具体概率表</a></p><p><img src="https://img-blog.csdnimg.cn/20200216161337882.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_26,color_FFFFFF,t_70" width = "450" height = "500" alt="概率表" style="margin-left:50px"></p><p>除了英语，其他语言也有相关统计（<a href="https://www.cnblogs.com/inverseEntropy/p/10151176.html" target="_blank" rel="noopener">图片来源</a>）<br><img src="https://img-blog.csdnimg.cn/20200216150833315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="多种语言的字母出现频率"></p><h3 id="二、一般破解的方法"><a href="#二、一般破解的方法" class="headerlink" title="二、一般破解的方法"></a>二、一般破解的方法</h3><h4 id="1-穷举密钥搜索"><a href="#1-穷举密钥搜索" class="headerlink" title="1. 穷举密钥搜索"></a>1. 穷举密钥搜索</h4><p>&emsp;&emsp;只适用于与小的密钥空间，而像维吉尼亚密码的 $Z^n_{26}$ 是 26 的 n 次方的空间，当 n 很大时，计算量是相当大的。</p><h4 id="2-频率统计"><a href="#2-频率统计" class="headerlink" title="2. 频率统计"></a>2. 频率统计</h4><h5 id="单表代换"><a href="#单表代换" class="headerlink" title="单表代换"></a>单表代换</h5><p><strong>移位密码：</strong> 相同的明文字母总是对应相同的密文字母，因此，尽管字母的外形改变了，他出现的概率还是不变的，只要根据足够多的样例来进行统计，最终密文字母的出现概率总是近似于明文字母的出现概率，并且与之一一对应。</p><h5 id="多表代换"><a href="#多表代换" class="headerlink" title="多表代换"></a>多表代换</h5><p><strong>维吉尼亚密码：</strong> 相同的明文字母可能对应不同的密文字母，这里讲的维吉尼亚密码的破解也是根据字母出现的频率的蛛丝马迹进行破解。</p><h3 id="三、维吉尼亚密码的破解"><a href="#三、维吉尼亚密码的破解" class="headerlink" title="三、维吉尼亚密码的破解"></a>三、维吉尼亚密码的破解</h3><h4 id="1-确定密钥长度"><a href="#1-确定密钥长度" class="headerlink" title="1. 确定密钥长度"></a>1. 确定密钥长度</h4><h5 id="方法一：Kasiski测试法"><a href="#方法一：Kasiski测试法" class="headerlink" title="方法一：Kasiski测试法"></a>方法一：Kasiski测试法</h5><p><strong>原理：密文中出现两个相同字母组，它们所对应的明文字母相同的可能性很大，这样的两个密文字母组之间的距离可能为密钥长度的整数倍。</strong><br><img src="https://img-blog.csdnimg.cn/2020021617084725.jpg" alt="在这里插入图片描述"><br>&emsp;&emsp;尽管在维吉尼亚密码中相同的明文可能对应不同的密文，但是若连续出现相同的密文，那么用同样的密钥加密的概率会大大增加。这里密文 $ZB$ 都是用 $HI$ 加密，计算两者之间的距离为 $5$，因此可推断出来密钥长度为 $5.$</p><h5 id="方法二：重合指数法"><a href="#方法二：重合指数法" class="headerlink" title="方法二：重合指数法"></a>方法二：重合指数法</h5><p><strong>原理：自然语言（以英语为例）的重合指数约为 0.065，而且单标代换不会改变该值。</strong><br><strong>重合指数定义：</strong></p><p>设 <script type="math/tex">x=x_1x_2...x_n</script> 是含有 $n$ 个字母的串，则在 $x$ 中随机选择两个元素且这两个元素相同的概率为：</p><p>定义：$f_i$ 为 26 个字母中第 $i$ 个字母在 $x$ 中出现的次数</p><p>[例如：$x=AAZZZ,n=5,f_0=2,f_{25}=3$，第一次取出 A 的概率为 $\frac {f_0} {n}$，第二次再取出 A 的概率为 $\frac {f_0} {n} * \frac {f_0-1} {n-1}$]</p><p>当我们把 26 个字母的概率全部相加，得到的总的概率就是<strong>重合指数</strong>：</p><script type="math/tex; mode=display">I_c(x)={\frac {\displaystyle\sum_{i=0}^{25}f_i(f_i-1)} {n(n-1)} }</script><p>当计算的数量很大时，我们将 $n(n-1)$ 近似为 $n^2$，将 $f_i(f_i-1)$ 近似为 $f_i^2$</p><p>因此</p><script type="math/tex; mode=display">I_c(x) \approx \displaystyle\sum_{i=0}^{25} {p_i^2} \approx0.065</script><p>这里的 $p_i$ 表示第 $i$ 个字母在英语语言中出现的概率，就是在<a href="#具体概率表">引言</a>中列出的数值。<br>这个数值非常重要。</p><p><strong>注意：在单表代换中，不会改变该值，也就是用相同密钥字加密应服从相同的重合指数。</strong></p><h5 id="猜测密钥长度"><a href="#猜测密钥长度" class="headerlink" title="猜测密钥长度"></a>猜测密钥长度</h5><p>&emsp;&emsp;假设密钥长度为 $d$，提取相同密钥字加密的密文，测试其重合指数。<br>&emsp;&emsp;如果猜测正确，则重合指数接近 $0.065$，否则字符串表现得更加随机一般在 $0.038(1/26) \thicksim 0.065$ 之间。<br><img src="https://img-blog.csdnimg.cn/20200216184236771.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="猜测密钥长度"><br>&emsp;&emsp;在这里，我们先猜测密钥长度为 5，然后将密文按照 5 进行分组，分别提取出用密钥 $k_1,k_2,k_3,k_4,k_5$ 加密的密文，组成集合 $C_1,C_2,C_3,C_4,C_5$，这样就把多表代换转化成了单表代换。<br>这里 $C_1=\{Z,P,L,W,Z\},C_2=\{P,A,Z,Z,N\},C_3=\{D,Z,B,B,M\},C_4=\{X,H,H,K\},C_5=\{V,S,I,M\}$</p><p>以一个例子为例：<br><img src="https://img-blog.csdnimg.cn/20200216214722472.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&emsp;&emsp;$CHR$ 这三个字符出现频率较高，因此我们将其位置记录下来，测算他们之间的距离，并取最大公因数 5，猜测 5 便是密钥长度。这很有可能是相同的明文被相同的密文加密了。其实很容易猜到，这很可能是英语当中的定冠词 <strong>the</strong>.</p><p>我们在用重合指数法进行测试，分别测试 $d=1,2,3,4,5$ （过程略）</p><div class="table-container"><table><thead><tr><th>$d$</th><th>重合指数</th></tr></thead><tbody><tr><td>$1$</td><td>$[0.045]$</td></tr><tr><td>$2$</td><td>$[0.046,0.041]$</td></tr><tr><td>$3$</td><td>$[0.043,0050,0.047]$</td></tr><tr><td>$4$</td><td>$[0.042,0.039,0.046,0.040]$</td></tr><tr><td>$5$</td><td>$[0.063,0.068,0.069,0.061,0.072]$</td></tr></tbody></table></div><p>&emsp;&emsp;观察发现，只有当 $d=5$ 的时候，重合指数接近 $0.065$，因此刚刚的猜测 $d=5$ 是正确的，这时通过穷举密钥的复杂度为 $26^5$，但是仍然比较大。</p><h4 id="2-确定密钥字相对位移"><a href="#2-确定密钥字相对位移" class="headerlink" title="2. 确定密钥字相对位移"></a>2. 确定密钥字相对位移</h4><p>密钥字的相对位移实际上就是确定密钥之间的相互关系。<br>这里引入一个定义：</p><p><strong>重合互指数:</strong><br>&emsp;&emsp;设 $x=x_1,x_2,…,x_n,y=y_1,y_2,…,y_{n’}$，分别为长度为 $n$ 和 $n’$ 的串，其重合互指数为从 $x$ 和 $y$ 中分别随机选出一个元素且两个元素相同的概率。</p><p>计算方法和刚刚的计算方法类似：</p><script type="math/tex; mode=display">MI_c(x,y)=\frac{\displaystyle\sum_{i=0}^{25}f_if'_i}{nn'}</script><p>具体不再阐述。</p><p>&emsp;&emsp;考虑不同密钥字加密后密文串的重合互指数，设密钥字为 $k=k_1k_2…k_d$，$C_i$ 中的一个字母与 $C_j$ 中的一个字母都是 $A$ 的概率为 $p_{0-k_i}p_{0-k_j}$.</p><p>其中 $p_{0-k_i}$ 为密文 $A$ 所对应明文字母的出现概率。同理可以计算 $B,C,D,…,Z$，因此：</p><script type="math/tex; mode=display">MI_c(C_i,C_j) \approx \displaystyle\sum_{l=0}^{25}p_{l-k_i}p_{l-k_j}=\displaystyle\sum_{l=0}^{25}p_lp_{l+k_i-k_j}=\displaystyle\sum_{l=0}^{25}p_{l-k_i+k_j}p_l</script><p>这里的下标是需要对 26 取模的，可以观察到：$Mi_c$ 取决于相对位移 $k_i-k_j$.</p><p>移位表如下：<br><img src="https://img-blog.csdnimg.cn/20200216224709354.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" width="500"/><br>观察这里当相对距离为0时，重合互指数为 $0.065$，在之前提到的自然语言的重合互指数也是 $0.065$，这并不是巧合。当相对位移位 0 时，其实就是 $C_1,C_2$ 的集合是用同一种密文加密得到，这也就是单表代换这样，并不会改变重合指数。</p><p>这里其实并不需要列举从 0 到 25 的所有值。</p><h5 id="猜测不同密钥字的相对位移s（猜测范围0-25）"><a href="#猜测不同密钥字的相对位移s（猜测范围0-25）" class="headerlink" title="猜测不同密钥字的相对位移s（猜测范围0~25）"></a>猜测不同密钥字的相对位移s（猜测范围0~25）</h5><script type="math/tex; mode=display">MI_c(C_i,C_j)=\frac{\displaystyle\sum_{t=0}^{25}f_{i,t}f_{j,t-s} } {n_in_j}</script><p>&emsp;&emsp;这里 $n_i$ 是指集合 $C_i$ 中字符个数，这里 $n_j$ 是指集合 $C_j$ 中字符个数，$f_{i,t}$ 表示在集合 $C_i$ 中，$t$ 这个密文字符出现的次数，$f_{j,t-s}$ 表示在集合 $C_j$ 中，$t-s$ 这个密文字符出现的次数。</p><p>&emsp;&emsp;如果猜对 $s$，那么 $MI_c$ 应该接近 $0.065$，这意味着找到了<strong>不同密钥字加密的相同的明文字母</strong>，这也就找到了密钥字之间的相对位移，也就转化成了单表代换。<br>这里用 $m$ 表示明文字母，$c,c’$ 分别表示 $C_i,C_j$ 中 $m$ 对应的密文字母，那么：</p><script type="math/tex; mode=display">m=c-k_i \pmod{26} \\ m=c'-k_j \pmod{26}</script><p>&emsp;&emsp;实际上，在维吉尼亚密码中，并没有很好的隐藏密钥和密文之间的相互关系，密钥之间的相互差距会体现在密文之间的相互关系。</p><p>&emsp;&emsp;我们计算上面例子中的集合 $C_1,C_2,C_3,C_4,C_5$ 两两之间的重合互指数：</p><p><img src="https://img-blog.csdnimg.cn/20200216231804835.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" width="550"/></p><p>&emsp;&emsp;这里的 $i,j$ 表示当取到不同集合的时候，后面的值表示当猜测的相对位移 $s$ 取不同值的时候重合互指数的结果。</p><p>&emsp;&emsp;我们观察结果，当 $i=1,j=2,s=9$ 时，重合互指数达到了 $0.068$，因此可以得到 $k_1-k_2=9$.<br>&emsp;&emsp;但是当 $i=1,j=3;i=1,j=4$ 时，没有合适的相对位移，那么我们先暂时跳过，观察其他结果，发现当 $i=1,j=5,s=16$ 时，重合互指数达到 $0.070$，$i=2,j=3,s=13$ 的时候，重合互指数达到了 $0.067$.<br><img src="https://img-blog.csdnimg.cn/2020021623254417.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" width="550"/><br>我们列举完剩下的结果，得到：</p><script type="math/tex; mode=display">k_1-k_2=9 \\ k_1-k_5=16 \\ k_2-k_3=13 \\ k_2-k_5=7 \\ k_3-k_5=20 \\ k_4-k_5=11</script><h4 id="3-穷举搜索密钥字"><a href="#3-穷举搜索密钥字" class="headerlink" title="3. 穷举搜索密钥字"></a>3. 穷举搜索密钥字</h4><p>&emsp;&emsp;根据上述的结果，在确定密钥字之间关系式的基础上，只要穷举 $26$ 中可能性就可以了。因为当猜测 $k_1$ 的时候， $k_2$ 也就确定下来了，以此类推，剩下的几个密钥也就确定下来了，只要从 $A-Z$ 进行穷举即可。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>&emsp;&emsp;一个好的密码加密方案（或者说是算法），应该要很好的隐藏密钥和密文之间的联系，通过更复杂的算法或者在更大的密钥空间中，可以有效避免穷举搜索破解。如何设计加密算法以及如何选择合适的密钥空间，将在今后继续学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;维吉尼亚密码的破解&quot;&gt;&lt;a href=&quot;#维吉尼亚密码的破解&quot; class=&quot;headerlink&quot; title=&quot;维吉尼亚密码的破解&quot;&gt;&lt;/a&gt;维吉尼亚密码的破解&lt;/h2&gt;&lt;h3 id=&quot;一、引言&quot;&gt;&lt;a href=&quot;#一、引言&quot; class=&quot;headerlink&quot; title=&quot;一、引言&quot;&gt;&lt;/a&gt;一、引言&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;上一章我们介绍了维吉尼亚密码的原理，是通过移位替换的加密方法进行加密，但是因为概率论的出现这种简单的移位或替换就容易破解了，其原理很简单，英文中字母出现的频率是不一样的。比如字母 &lt;strong&gt;e&lt;/strong&gt; 是出现频率最高的，占&lt;strong&gt;12.7%&lt;/strong&gt;；其次是&lt;strong&gt;t&lt;/strong&gt;，&lt;strong&gt;9.1%&lt;/strong&gt;；然后是&lt;strong&gt;a&lt;/strong&gt;，&lt;strong&gt;o&lt;/strong&gt;，&lt;strong&gt;i&lt;/strong&gt;，&lt;strong&gt;n&lt;/strong&gt;等，最少的是&lt;strong&gt;z&lt;/strong&gt;，只占&lt;strong&gt;0.1%&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="密码学" scheme="http://CherryYang05.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://CherryYang05.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="古典密码" scheme="http://CherryYang05.github.io/tags/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/"/>
    
      <category term="维吉尼亚密码" scheme="http://CherryYang05.github.io/tags/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>密码学（一）：古典密码之维吉尼亚密码介绍</title>
    <link href="http://cherryyang05.github.io/2020/05/06/%E5%AF%86%E7%A0%81%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E4%B9%8B%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81%E4%BB%8B%E7%BB%8D/"/>
    <id>http://cherryyang05.github.io/2020/05/06/%E5%AF%86%E7%A0%81%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E4%B9%8B%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-05-06T08:55:26.000Z</published>
    <updated>2020-05-06T09:06:59.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="维吉尼亚（Vigenere-Cipher）密码原理介绍"><a href="#维吉尼亚（Vigenere-Cipher）密码原理介绍" class="headerlink" title="维吉尼亚（Vigenère Cipher）密码原理介绍"></a>维吉尼亚（Vigenère Cipher）密码原理介绍</h2><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><blockquote><p>&emsp;&emsp;维吉尼亚密码（又译维热纳尔密码）是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。<br>&emsp;&emsp;维吉尼亚密码曾多次被发明。该方法最早记录在吉奥万·巴蒂斯塔·贝拉索（ Giovan Battista Bellaso）于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的密码》（意大利语：La cifra del. Sig. Giovan Battista Bellaso）中。然而，后来在19世纪时被误传为是法国外交官布莱斯·德·维吉尼亚（Blaise De Vigenère）所创造，因此现在被称为“维吉尼亚密码”。<br>&emsp;&emsp;维吉尼亚密码以其简单易用而著称，同时初学者通常难以破解，因而又被称为“不可破译的密码”（法语：le chiffre indéchiffrable）。这也让很多人使用维吉尼亚密码来加密的目的就是为了将其破解。<br>来源：<a href="https://baike.baidu.com/item/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/4905472?fr=aladdin" target="_blank" rel="noopener">百度百科</a><br><img src="https://img-blog.csdnimg.cn/20200216154546299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><a id="more"></a></p><h3 id="二、古典密码"><a href="#二、古典密码" class="headerlink" title="二、古典密码"></a>二、古典密码</h3><h4 id="1-移位密码"><a href="#1-移位密码" class="headerlink" title="1. 移位密码"></a>1. 移位密码</h4><p>我们首先引入符号表示：<br>$P$：明文空间，所有可能的明文组成的有限集<br>$C$：密文空间，所有可能的密文组成的有限集<br>$K$：密钥空间，所有可能的密钥 $k$ 组成的有限集<br>$Enc$：加密算法<br>&emsp;&emsp;$Enc_k(m)=c$ 加密算法$Enc$以密钥$k$、明文$m$为输入，输出密文$c$<br>$Dec$：加密算法<br>&emsp;&emsp;$Dec_k(c)=m$ 解密算法$Dec$以密钥$k$、密文$c$为输入，输出明文$m$<br>算法正确性：对每个明文 $m\in P$ 以及秘钥 $k\in K$ 都有 $Dec_k(Enc_k(m))=m$</p></blockquote><p>其中最典型的移位密码就是凯撒密码，凯撒密码是通过移位替换的方法，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。</p><script type="math/tex; mode=display">令P=C=K=Z_{26}=\{ 0,1,2,3,...,25 \} \\随机选择 K \in Z_{26} 作为密钥 \\Enc_k(m)=m+k \pmod {26} \\Dec_k(c)=c-k\pmod{26}</script><p>其中 $Z_{26}$ 是26个英文字母组成的集合空间。<br>例如，当偏移量$k$是3的时候，所有的字母A将被替换成D，B变成E … Z变成C，以此类推。</p><h4 id="2-维吉尼亚密码"><a href="#2-维吉尼亚密码" class="headerlink" title="2.维吉尼亚密码"></a>2.维吉尼亚密码</h4><p>维吉尼亚密码便是移位密码的推广</p><script type="math/tex; mode=display">P=C=K=Z_{26}^n\\随机选择密钥k=(k_1,k_2,..,k_n) \in Z_{26}^n \\Enc_k(m_1,m_2,...,m_n)=(m_1+k_1,m_2+k_2,...,m_n+k_n) \\Dec_k(c_1,c_2,...,c_n)=(c_1-k_1,c_2-k_2,...,c_n-k_n)</script><p>实际上就是每个明文加上对应的密钥字。<br>举例如下：若密钥为 $CIPHER$，即 $k=(2,8,15,7,4,17)$<br><img src="https://img-blog.csdnimg.cn/20200216154923425.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>明文是以下字符串：</p><p>$THISCRYPTOSYSTEMISNOTSECURE$</p><p>我们根据字母表将字符串翻译成数字：</p><p>$(19,7,8,18,2,17,24,15,19,14,18,24,18,19,4,12,8,18,13,14,19,18,4,2,20,17,4)$</p><p>然后将其按照密钥个数进行分组，分别与集合 $K$ 相加，得到密钥：</p><p>$(21,15,23,25,6,8,0,23,8,21,22,15,20,1,19,19,12,9,15,22,8,25,8,19,22,25,19)$</p><p>因此密文为：</p><p>$VPXZGIAXIVWPUBTTMJPWIZITWZT$</p><h4 id="3-二维表形式"><a href="#3-二维表形式" class="headerlink" title="3. 二维表形式"></a>3. 二维表形式</h4><p>我们观察到，若密钥为1的话，A将会变成B，若密钥为2的话，A将会变成C，实际上就是字母表整体往左边移动了一个字母和两个字母的距离，我们把移动的26种情况整理下来，变成了一张二维表。<br>其中棕色的行表示明文，橙色的列表示密钥。<br>若密钥为3，实际上对应的字母为C，那么就到C的那一行，可以观察到，A对应的是C，以此类推。因此若想找明文A对应密钥为C的密文，只要找他们的交点即可。以上述例子为例，$THIS$ 的密钥为$(2,8,5,17)$，对应的字母为 $CIPH$，找到 $T$ 和 $C$的交点 $V$，$H$ 和 $I$ 的交点 $P$，$I$ 和 $P$ 的焦点 $X$，$S$ 和 $H$ 的交点 $Z$.因此其密文为 $VPXZ.$<br><img src="https://img-blog.csdnimg.cn/20200216150222284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="维吉尼亚密码二维表"><br>普通的移位密码是通过相同的移位来加密，若明文中有两个相同的字母，例如 $HAPPY$ 的$P$，加密过后仍然会有两个相同的字母，若样本多了之后，就可以根据一些单词的特征进行判断推理进行解密，因此普通的移位加密并不是一种好的加密方法。维吉尼亚密码就可以很好的解决这样的问题。</p><p>下一章将介绍维吉尼亚密码的解密。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;维吉尼亚（Vigenere-Cipher）密码原理介绍&quot;&gt;&lt;a href=&quot;#维吉尼亚（Vigenere-Cipher）密码原理介绍&quot; class=&quot;headerlink&quot; title=&quot;维吉尼亚（Vigenère Cipher）密码原理介绍&quot;&gt;&lt;/a&gt;维吉尼亚（Vigenère Cipher）密码原理介绍&lt;/h2&gt;&lt;h3 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;维吉尼亚密码（又译维热纳尔密码）是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。&lt;br&gt;&amp;emsp;&amp;emsp;维吉尼亚密码曾多次被发明。该方法最早记录在吉奥万·巴蒂斯塔·贝拉索（ Giovan Battista Bellaso）于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的密码》（意大利语：La cifra del. Sig. Giovan Battista Bellaso）中。然而，后来在19世纪时被误传为是法国外交官布莱斯·德·维吉尼亚（Blaise De Vigenère）所创造，因此现在被称为“维吉尼亚密码”。&lt;br&gt;&amp;emsp;&amp;emsp;维吉尼亚密码以其简单易用而著称，同时初学者通常难以破解，因而又被称为“不可破译的密码”（法语：le chiffre indéchiffrable）。这也让很多人使用维吉尼亚密码来加密的目的就是为了将其破解。&lt;br&gt;来源：&lt;a href=&quot;https://baike.baidu.com/item/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/4905472?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200216154546299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="密码学" scheme="http://CherryYang05.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://CherryYang05.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="古典密码" scheme="http://CherryYang05.github.io/tags/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/"/>
    
      <category term="维吉尼亚密码" scheme="http://CherryYang05.github.io/tags/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cherryyang05.github.io/2020/05/04/hello-world/"/>
    <id>http://cherryyang05.github.io/2020/05/04/hello-world/</id>
    <published>2020-05-04T04:10:51.326Z</published>
    <updated>2020-05-06T08:53:41.283Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="web前端" scheme="http://CherryYang05.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Test" scheme="http://CherryYang05.github.io/tags/Test/"/>
    
      <category term="demo" scheme="http://CherryYang05.github.io/tags/demo/"/>
    
  </entry>
  
</feed>
